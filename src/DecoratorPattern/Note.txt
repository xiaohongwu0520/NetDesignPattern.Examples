装饰者模式

优点：
1、装饰这模式和继承的目的都是扩展对象的功能，但装饰者模式比继承更灵活
2、通过使用不同的具体装饰类以及这些类的排列组合，设计师可以创造出很多不同行为的组合
3、装饰者模式有很好地可扩展性

缺点：
1、装饰者模式会导致设计中出现许多小对象，如果过度使用，会让程序变的更复杂。并且更多的对象会是的差错变得困难，特别是这些对象看上去都很像。
2、装饰着模式提供一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，拍错也困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐

使用场景：
1、在不影响其他对象的情况下，需要扩展一个类的功能或以动态、透明的方式给单个对象添加职责。
2、当不能采用继承的方式对系统扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。不能采用继承的情况主要有两种;第一种是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；第二种是因为类已定义为不能被继承（例如C#语言中的密封类，即使用Sealed关键字修饰的类）。
3、需要增加由一些基本功能的排列组合而产生的非常大量的功能