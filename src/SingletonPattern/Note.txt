单例模式

确保一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。

优点
(1)单例模式提供了对唯一实例的受控访问。因为单例类封装厂它的唯一实例,所以
可以严格控制客户怎样访问它以及何时访问它.
(2)由于在系统内存中只存在一个对象,因此可以节约系统资源,对于一些需要频繁创
建和销毁的对象,使用单例模式无疑可以提高系统的性能.
(3)单例模式允许可变数目的实例。 基于单例模式可以进行扩展,使用与控制单例对
象相似的方法来获得指定个数的实例对象,既节省系统资源,又解决了由于单例对象共享过
多有损性能的问题(自行提供指定数目实例对象的类可称为多例类)。

缺点
(1)由于单例模式中没有抽象层,因此,单例类的扩展有很大的困难。
(2)单例类的职责过重.在一定程度上违背了单一职责原则。因为单例类既提供了业
务方法,又提供了创建对象的方法(工厂方法),将对象的创建和对象本身的功能耦合在
一起.
(3)现在很多面向对象语言(如C#,Java)的运行环境都提供了自动垃圾回收技术,因
此,实例化的共享对象长时间不被利用,系统会认为它是垃圾,会自动销毁并回收资源,在下
次利用时又将重新实例化,这将导致共享的单例对象状态丢失。

适用环境
(1)系统只需要一个实例对象,例如系统要求提供一个唯一的序列号生成器或资源管
理器,或者因为资源消耗太大而只允许创建一个对象。
(2)客户调用类的单个实例只允许使用一个公共访问点,除了该公共访问点,不能通过
其他途径访问该实例

